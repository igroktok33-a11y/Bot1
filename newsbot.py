# newsbot.py
import asyncio
import re
from datetime import datetime
from zoneinfo import ZoneInfo
import html
from typing import Tuple, List

from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram.client.bot import Bot, DefaultBotProperties
from aiogram.client.session.aiohttp import AiohttpSession

# ---------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ----------
BOT_TOKEN = "8192610652:AAG-ifECYgnuLLpXBs5dJYGjLYGVFzVcsog"  # <- –≤—Å—Ç–∞–≤ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω
TIMEZONE = "Europe/Kyiv"               # –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —á–∞—Å–æ–≤—É –∑–æ–Ω—É –ö–∏—î–≤–∞
# -----------------------------------

# üü¢ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –¥–ª—è aiogram 3.7+
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML"),
    session=AiohttpSession()
)
dp = Dispatcher()

# ---------- –§—É–Ω–∫—Ü—ñ—ó ----------
def _now_kiev() -> str:
    now = datetime.now(tz=ZoneInfo(TIMEZONE))
    return now.strftime("%d.%m | %H:%M")

def extract_source(text: str) -> Tuple[str, str]:
    """–®—É–∫–∞—î –¥–∂–µ—Ä–µ–ª–æ —É —Ç–µ–∫—Å—Ç—ñ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î (source, text_without_source)."""
    m = re.search(r"(–î–∂–µ—Ä–µ–ª–æ[:\s]*)(.+?)(?:\n|$)", text, flags=re.I)
    if m:
        source = m.group(2).strip()
        new_text = text[:m.start()] + text[m.end():]
        return source, new_text.strip()
    m2 = re.search(r"[‚Äî‚Äì-]\s*([^\n,\.]+)(?:\.|$|\n)", text)
    if m2:
        source = m2.group(1).strip()
        new_text = text[:m2.start()] + text[m2.end():]
        return source, new_text.strip()
    return "", text

def extract_places(text: str) -> List[str]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π/–≥—Ä–æ–º–∞–¥/–º—ñ—Å—Ç/—Ä–∞–π–æ–Ω—ñ–≤, –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —É —Ç–µ–∫—Å—Ç—ñ."""
    candidates = []
    pattern = re.compile(
        r"([–ê-–Ø“ê–Ñ–Ü–á][\w\'\-—ñ—î—ó“ë—î—ñ—ó\s]{1,60}?(?:–æ–±–ª–∞—Å—Ç[—ñ—è]|–≥—Ä–æ–º–∞–¥[–∞–∏]|–º—ñ—Å—Ç[–∞–æ]|–Ω–∞—Å–µ–ª–µ–Ω–∏—Ö –ø—É–Ω–∫—Ç[–∞-—è—ñ—ó—î“ë]{0,6}|—Ä–∞–π–æ–Ω[–∞—É]|—Å–µ–ª–∏—â[–∞–æ]))",
        flags=re.I
    )
    for m in pattern.finditer(text):
        s = m.group(1).strip()
        s = re.sub(r"\s+", " ", s)
        s = s[0].upper() + s[1:]
        if s not in candidates:
            candidates.append(s)
    return candidates

def guess_title(text: str, places: List[str], source: str) -> str:
    txt = text.strip()
    if source:
        txt = txt.replace(source, "")
    for p in places:
        txt = txt.replace(p, "")
    lines = [ln.strip() for ln in txt.splitlines() if ln.strip()]
    if not lines:
        return ""
    first = lines[0]
    if len(first) <= 160:
        return _clean_title(first)
    m = re.search(r"(.+?[.!?\n])\s", txt)
    if m:
        return _clean_title(m.group(1).strip())
    return _clean_title(first[:160].rstrip(" ,;:") + "...")

def _clean_title(t: str) -> str:
    t = t.strip()
    t = re.sub(r"\s+", " ", t)
    t = re.sub(r"^[^\w–ê-–Ø–∞-—è–Ñ—î–Ü—ñ–á—ó“ê“ë0-9]+", "", t)
    return t

def extract_details(text: str, title: str, places: List[str], source: str) -> str:
    txt = text.strip()
    if title:
        txt = txt.replace(title, "")
    if source:
        txt = txt.replace(source, "")
    for p in places:
        txt = txt.replace(p, "")
    txt = txt.strip(" \n-‚Äì‚Äî¬∑‚Ä¢")
    if not txt:
        return ""
    paragraphs = [p.strip() for p in re.split(r"\n{1,}", txt) if p.strip()]
    if len(paragraphs) == 1:
        para = paragraphs[0]
        sents = re.split(r"(?<=[\.!\?])\s+", para)
        if len(sents) > 1:
            paragraphs = sents
    return "\n".join(paragraphs)

def format_post(title: str, places: List[str], time_str: str, details: str, source: str) -> str:
    title_html = html.escape(title) if title else "–ü–æ–¥—ñ—è"
    event_line = f"‚ö° <b>–ü–æ–¥—ñ—è:</b> {title_html}"
    place_text = " ‚Ä¢ ".join([html.escape(p) for p in places]) if places else "‚Äî"
    place_line = f"üìç <b>–ú—ñ—Å—Ü–µ:</b> {place_text}"
    time_line = f"üïì <b>–ß–∞—Å:</b> {html.escape(time_str)}"
    details_block = f"\n\nüì¢ <b>–î–µ—Ç–∞–ª—ñ:</b>\n{html.escape(details)}" if details else ""
    source_block = f"\n\nüìö <b>–î–∂–µ—Ä–µ–ª–æ:</b> {html.escape(source)}" if source else ""
    hashtags = "\n\n#–Ω–æ–≤–∏–Ω–Ω–∏–∫ #–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ"
    return f"{event_line}\n{place_line}\n{time_line}{details_block}{source_block}{hashtags}"

# ---------- –û–±—Ä–æ–±–Ω–∏–∫–∏ ----------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ —Å–∏—Ä–∏–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏ ‚Äî —è –ø–æ–≤–µ—Ä–Ω—É –π–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ ¬´–ù–æ–≤–∏–Ω–Ω–∏–∫¬ª.")

@dp.message()
async def handle_message(message: types.Message):
    raw = message.text or ""
    if not raw.strip():
        await message.answer("‚ö†Ô∏è –ù–∞–¥—ñ—à–ª–∏ –±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏.")
        return
    source, text_wo_source = extract_source(raw)
    places = extract_places(text_wo_source)
    title = guess_title(text_wo_source, places, source)
    if not title:
        title = text_wo_source.strip().splitlines()[0][:120].strip()
    details = extract_details(text_wo_source, title, places, source)
    time_str = _now_kiev()
    post = format_post(title=title, places=places, time_str=time_str, details=details, source=source)
    await message.answer(post)

# ---------- –ó–∞–ø—É—Å–∫ ----------
async def main():
    print("‚úÖ NewsBot running...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
